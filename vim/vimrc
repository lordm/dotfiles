call plug#begin('~/.vim/plugged')
  Plug 'mileszs/ack.vim'
  Plug 'kien/ctrlp.vim'
  Plug 'tpope/vim-fugitive'
  Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }
  Plug 'majutsushi/tagbar'
  Plug 'sjl/gundo.vim'  "Needs to update to py3
  Plug 'scrooloose/nerdtree'
  "Plug 'powerline/powerline' "Moved to python code
  Plug 'tpope/vim-rails'
  Plug 'pangloss/vim-javascript'
  Plug 'lordm/vim-browser-reload-linux'
  Plug 'myusuf3/numbers.vim'
  Plug 'sickill/vim-pasta'
  Plug 'vim-scripts/star-search'
  Plug 'mhinz/vim-startify'
  Plug 'ycm-core/YouCompleteMe', { 'do': './install.py --clang-completer --tern-completer --java-completer' }
  Plug 'rdnetto/YCM-Generator', { 'branch': 'stable'}
  "Plug 'vim-syntastic/syntastic'
  Plug 'dense-analysis/ale'
  Plug 'SirVer/ultisnips'
  Plug 'nathanaelkane/vim-indent-guides'
  Plug 'tpope/vim-surround'
  Plug 'honza/vim-snippets'
  Plug 'ntpeters/vim-better-whitespace'
  Plug 'scrooloose/nerdcommenter'
  Plug 'othree/html5.vim'
  Plug 'mxw/vim-jsx'
  Plug 'prettier/vim-prettier', { 'do': 'yarn install' }
  "Plug 'taketwo/vim-ros' "Needs to update to py3
  Plug 'rhysd/vim-clang-format'
  Plug 'plasticboy/vim-markdown'
call plug#end()

set nocompatible                " Choose no compatibility with legacy vi

set t_Co=256
colorscheme jellybeans

set encoding=utf-8
set showcmd                     " Display incomplete commands
set showmode                    " Display the mode you're in.
set number                      " Show line numbers.
set hidden                      " hide buffers instead of closing on switching

syntax on                       " Enable syntax highlighting
filetype on                     " Enable filetype detection
filetype indent on              " Enable filetype-specific indenting
filetype plugin on              " Enable filetype-specific plugins

"" Whitespace
set autoindent
set smartindent
set nowrap                      " Don't wrap lines
set tabstop=2 shiftwidth=2      " A tab is two spaces (or set this to 4)
set expandtab                   " Use spaces, not tabs (optional)
set backspace=indent,eol,start  " Backspace through everything in insert mode
set linespace=2

"" Searching
set hlsearch                    " Highlight matches
set incsearch                   " Incremental searching
set ignorecase                  " Searches are case insensitive...
set smartcase                   " ... unless they contain at least one capital letter

""
set visualbell                  " Don't beep
set noerrorbells                " Don't beep

"" Mappings
nmap <F8> :TagbarToggle<CR>         " mapping f8 to TagbarToggle
nmap <F2> :NERDTreeToggle<CR>       " mapping f2 to NERDTreeToggle
noremap <F5> :GundoToggle<CR>       " mapping f5 to Gundo
noremap <F9> :Gcommit<CR>           " mapping f9 to Gcommit
nnoremap <F3> :NumbersToggle<CR>
nnoremap <F4> :NumbersOnOff<CR>
"" inoremap jj <Esc>                   "<Esc> to jj
let g:UltiSnipsExpandTrigger="<c-j>"

"let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsSnippetDirectories=["UltiSnips"]

"" Plugins

" Disable Pylint on Save
let g:pymode_lint_write = 0         " python-mode

" Enable python folding
let g:pymode_folding = 0            " python-mode
let g:pymode_indent = 0            " python-mode

set laststatus=2                    " Always show the statusline

let g:Powerline_symbols = 'fancy'   " Powerline

" Disable YCM confirmation
let g:ycm_confirm_extra_conf = 0

" Disable JSLint automatic checking
autocmd FileType javascript :JSLintToggle

" ruby
autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1

" Matlab
map <leader>r :w<CR>:!/usr/local/bin/matlab -nodesktop -nosplash -r "try, run %:p, pause, catch, end, quit" <CR> <CR>"

" Syntastic headers inclusion
let b:syntastic_c_include_dirs = [ '../include', 'include' ]
let b:syntastic_cpp_include_dirs = [ '../include', 'include' ]
let g:syntastic_cpp_auto_refresh_includes = 1
let g:syntastic_cpp_compiler_options = ' -Wall -Wno-write-strings -std=c++11 -g `pkg-config --cflags opencv` `pkg-config --cflags sigc++-2.0` `visp-config --cflags`'
let g:syntastic_javascript_checkers = ['eslint']

" Read in cookiefiles
command -bar Cookies call ReadCookies()
function ReadCookies()
    call system("cp Cookies.binarycookies /tmp/")
    %!python2 $HOME/BinaryCookieReader.py /tmp/Cookies.binarycookies
endfunction

" Indent Guide
let g:indent_guides_guide_size = 1

" Clear highlighted searches
nmap <silent> <leader>/ :nohlsearch<CR>

" If forgot sudo before editing a file with root privileges
cmap w!! w !sudo tee % >/dev/null

" ROS YCM support
"let g:ycm_semantic_triggers = {
   "'roslaunch' : ['="', '$(', '/'],
   "'rosmsg,rossrv,rosaction' : ['re!^', '/'],
 "}

let g:jsx_ext_required = 0 "Allow JSX in normal JS files
let g:syntastic_javascript_eslint_exe = 'npm run eslint --'
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 1

let g:ale_linters = { 'python': ['flake8'], 'c': ['clang'], 'javascript': ['eslint'] }
let g:gundo_prefer_python3 = 1

let g:prettier#config#single_quote = 'true'
let g:prettier#config#bracket_spacing = 'true'
let g:prettier#config#jsx_bracket_same_line = 'true'
let g:prettier#config#arrow_parens = 'avoid'
let g:prettier#config#trailing_comma ='none'
let g:prettier#config#parser = 'babylon'
